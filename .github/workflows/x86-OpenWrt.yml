name: OpenWrt for x86

on:
  push:
    branches:
      - master
    paths:
      - 'CHANGELOG.md'
      - '.github/workflows/x86-OpenWrt.yml'

env:
  UPLOAD_FIRMWARE: true
  TZ: Asia/Hong_Kong
  MYOPENWRTTARGET: x86

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: 'master'

    - name: Show system
      run: |
        echo -e "Total CPU cores\t: $(nproc)"
        cat /proc/cpuinfo | grep 'model name'
        free -h
        uname -a
        [ -f /proc/version ] && cat /proc/version
        [ -f /etc/issue.net ] && cat /etc/issue.net

    - name: Free disk space
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E swapoff -a
        sudo -E rm -f /swapfile
        sudo -E docker image prune -a -f
        sudo -E snap set system refresh.retain=2
        sudo -E apt-get -qq -y purge dotnet* firefox ghc* google* hhvm llvm* mono* mysql* openjdk* php* zulu*
        sudo -E apt-get -qq -y autoremove --purge
        sudo -E apt-get -qq clean
        sudo -E rm -rf /usr/share/dotnet /usr/share/swift /usr/local/lib/android /etc/mysql /etc/php
        df -h

    - name: Init build dependencies
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E rm -rf /etc/apt/sources.list.d/*
        sudo -E apt-get -qq update -y
        sudo -E apt-get -qq install -y antlr3 asciidoc autoconf automake autopoint binutils build-essential bzip2 ccache coreutils curl device-tree-compiler file flex g++-multilib gawk gcc-multilib gettext git git-core gperf haveged jq lib32gcc1 libc6-dev-i386 libelf-dev libglib2.0-dev libncurses5-dev libreadline-dev libssl-dev libtool libz-dev lrzsz msmtp nano p7zip p7zip-full patch python3 python3-dev python3-pip python3-ply python3-pyelftools qemu-utils rsync scons subversion swig texinfo uglifyjs unzip upx vim wget xmlto zlib1g-dev
        sudo -E apt-get -qq clean -y
        git config --global user.name 'GitHub Actions' && git config --global user.email 'noreply@github.com'
        df -h

    - name: Prepare OpenWrt
      run: |
        sudo chown -R runner:docker ./
        cp -f ./SCRIPTS/01_get_ready.sh ./01_get_ready.sh
        echo "FMDATETIME=$(date '+%Y%m%d-%H%M')" >> $GITHUB_ENV
        /bin/bash ./01_get_ready.sh

    - name: Prepare Package
      run: |
        cd openwrt
        cp -f ../SCRIPTS/*.sh ./
        /bin/bash ./02_prepare_package.sh

    - name: Convert Translation
      run: |
        cd openwrt
        /bin/bash ./03_convert_translation.sh

    - name: Add ACL
      run: |
        cd openwrt
        /bin/bash ./05_create_acl_for_luci.sh -a

    - name: Make Config
      run: |
        cd openwrt
        cp -f ../SEED/x86.config.seed .config
        cat   ../SEED/more.seed    >> .config
        make defconfig

    - name: Make Download
      run: |
        df -h
        cd openwrt && make download -j$(($(nproc) * 8))
        echo $?

    - name: Make Toolchain
      id: maketoolchain
      continue-on-error: true
      run: |
        df -h
        cd openwrt && make toolchain/install -j$(($(nproc) + 1))
        echo $?
        /bin/ls -AF staging_dir/toolchain-*/bin/

    - name: If Toolchain Error
      if: steps.maketoolchain.outcome == 'failure'
      run: |
        cd openwrt && make toolchain/install -j1 V=s

    - name: Compile OpenWrt
      id: compileopenwrt
      continue-on-error: true
      run: |
        df -h
        cd openwrt && make -j$(($(nproc) + 1)) V=w
        echo $?

    - name: If Compiling Error
      if: steps.compileopenwrt.outcome == 'failure'
      run: |
        cat openwrt/.config
        echo '================================================================'
        cd openwrt && make -j1 V=s

    - name: Cleaning and hashing
      run: |
        rm -rf ./artifact && mkdir -p ./artifact
        cd ./artifact
        echo "FIRMWAREDIR=$(pwd)" >> $GITHUB_ENV
        cd ../openwrt
        cp -f .config ../artifact/kconfig-full
        /bin/bash ./scripts/diffconfig.sh > ../artifact/kconfig-lite
        cd bin/targets/x86/64
        ls -Ahl
        /bin/bash ../../../../../SCRIPTS/06_cleaning.sh
        mv -f ./* ../../../../../artifact/
        echo "::set-output name=status::success"

    - name: Upload Firmwares
      uses: actions/upload-artifact@v3
      if: env.UPLOAD_FIRMWARE == 'true' && ${{ success() }}
      with:
        name: OpenWrt_x86_${{ env.FMDATETIME }}
        path: ${{ env.FIRMWAREDIR }}
