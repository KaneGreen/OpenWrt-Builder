name: FakeTest for x86

on:
  push:
    branches:
      - master
    paths:
      - 'CHANGELOG.md'
      - '.github/workflows/x86-fake.yml'

env:
  UPLOAD_FIRMWARE: true
  TZ: Asia/Hong_Kong

jobs:
  build:
    runs-on: ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: 'master'

    - name: Show system
      run: |
        echo -e "Total CPU cores\t: $(nproc)"
        cat /proc/cpuinfo | grep 'model name'
        free -h
        uname -a
        [ -f /proc/version ] && cat /proc/version
        [ -f /etc/issue.net ] && cat /etc/issue.net
        [ -f /etc/issue ] && cat /etc/issue
        ulimit -a

    - name: Free disk space
      run: |
        sudo -E swapoff -a
        sudo -E rm -f /swapfile
        sudo -E docker image prune -a -f
        sudo -E snap set system refresh.retain=2
        sudo -E apt-get -y purge azure* dotnet* firefox ghc* google* hhvm llvm* mono* mysql* openjdk* php* zulu*
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
        sudo -E rm -rf /usr/share/dotnet /usr/local/lib/android/sdk /etc/mysql /etc/php /usr/local/share/boost
        [ -n "$AGENT_TOOLSDIRECTORY" ] && sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        df -h

    - name: Init build dependencies
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E rm -rf /etc/apt/sources.list.d
        sudo -E apt-get update -y
        sudo -E apt-get install -y asciidoc autoconf automake binutils build-essential bzip2 ccache curl device-tree-compiler file flex gcc-multilib g++ g++-multilib gawk gcc gettext git git-core help2man libelf-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool make patch perl-modules python3 python3-distutils python3-pip python3-setuptools qemu-utils rsync scons subversion texinfo time unzip upx wget xsltproc zlib1g-dev
        sudo -E apt-get clean -y
        git config --global user.name 'GitHub Actions' && git config --global user.email 'noreply@github.com'
        df -h

    - name: Prepare Openwrt
      run: |
        sudo chown -R runner:docker ./
        cp -f ./SCRIPTS/01_get_ready.sh ./01_get_ready.sh
        echo "MYOPENWRTTARGET=x86" >> $GITHUB_ENV
        echo "FMDATETIME=$(date '+%Y%m%d-%H%M')" >> $GITHUB_ENV
        /bin/bash ./01_get_ready.sh

    - name: Prepare Package
      run: |
        cd openwrt
        cp -f ../SCRIPTS/*.sh ./
        /bin/bash -c 'echo $MYOPENWRTTARGET'

    - name: Convert Translation
      run: |
        cd openwrt
        /bin/bash -c 'echo $MYOPENWRTTARGET'

    - name: Remove Upx
      run: |
        cd openwrt
        /bin/bash -c 'echo $MYOPENWRTTARGET'

    - name: Add ACL
      run: |
        cd openwrt
        /bin/bash -c 'echo $MYOPENWRTTARGET'

    - name: Make Config
      run: |
        cd openwrt
        cp -f ../SEED/x86/config.seed  .config
        cat   ../SEED/x86/more.seed >> .config
        /bin/bash -c 'echo $MYOPENWRTTARGET'

    - name: Make Download
      run: |
        df -h
        cd openwrt
        let Make_Process=$(nproc)*4
        make download -j${Make_Process}
        /bin/bash -c 'echo $MYOPENWRTTARGET'

    - name: Smart chmod
      run: |
        MY_Filter=$(mktemp)
        echo '/\.git' >  ${MY_Filter}
        echo '/\.svn' >> ${MY_Filter}
        find ./ -maxdepth 1 | grep -v '\./$' | grep -v '/\.git' | xargs -s1024 chmod -R u=rwX,og=rX
        find ./ -type f | grep -v -f ${MY_Filter} | xargs -s1024 file | grep 'executable\|ELF' | cut -d ':' -f1 | xargs -s1024 chmod 755
        rm -f ${MY_Filter}
        unset MY_Filter
        /bin/bash -c 'echo $MYOPENWRTTARGET'

    - name: Make Toolchain
      run: |
        df -h
        cd openwrt
        let Make_Process=$(nproc)+1
        /bin/bash -c 'echo $MYOPENWRTTARGET'
        echo $?
        /bin/ls -AF staging_dir/toolchain-*/bin/

    - name: Compile Openwrt
      id: compileopenwrt
      continue-on-error: true
      run: |
        df -h
        cd openwrt
        let Make_Process=$(nproc)+1
        /bin/bash -c 'echo $MYOPENWRTTARGET'
        echo $?

    - name: If Error
      if: steps.compileopenwrt.outcome == 'failure'
      run: |
        cat openwrt/.config
        echo '================================================================'
        cd openwrt && /bin/bash -c 'echo $MYOPENWRTTARGET'

    - name: Cleaning and hashing
      run: |
        rm -rf ./artifact && mkdir -p ./artifact
        cd ./artifact
        echo "FIRMWAREDIR=$(pwd)" >> $GITHUB_ENV
        cd ../openwrt
        cp -f .config ../artifact/kconfig-full
        /bin/bash -c 'echo $MYOPENWRTTARGET'
        echo "::set-output name=status::success"

    - name: Upload Firmwares
      uses: actions/upload-artifact@v2
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      with:
        name: OpenWrt_x86_${{ env.FMDATETIME }}
        path: ${{ env.FIRMWAREDIR }}
